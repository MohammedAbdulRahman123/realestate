// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:

model Category {
  id            Int           @id @default(autoincrement())
  category_name String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  extra         Json?
  SubCategory   SubCategory[]
}

model SubCategory {
  id                Int       @id @default(autoincrement())
  sub_category_name String
  category          Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desc              Json
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  extra             Json?
  Product           Product[]
  categoryId        Int
}

model Product {
  id            Int         @id @default(autoincrement())
  product_name  String
  subcategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desc          Json
  configuration Json
  price         Json
  image         String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  extra         Json?
  subCategoryId Int
}

model Order {
  id            String   @id @default(uuid())
  order_item    Json
  total_amount  Float
  status        String
  delivary_date DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  extra         Json?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int
}

model Configuration {
  id         Int      @id @default(autoincrement())
  heading    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?
}

model User {
  id                  Int       @id @default(autoincrement())
  name                String?
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String
  permissions         Json?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  extra               Json?
  Order               Order[]
}
